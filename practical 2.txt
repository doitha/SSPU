// Practical 2 co 


#include <xc.h>
#include <pic16f887.h>
#include <stdlib.h>

#define _XTAL_FREQ 8000000

#define RS RE0
#define EN RE1
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

void Lcd_Port(char a) {
    if(a & 1)
        D4 = 1;
    else
        D4 = 0;

    if(a & 2)
        D5 = 1;
    else
        D5 = 0;

    if(a & 4)
        D6 = 1;
    else
        D6 = 0;

    if(a & 8)
        D7 = 1;
    else
        D7 = 0;
}

void Lcd_Cmd(char a) {
    RS = 0;             // => RS = 0
    Lcd_Port(a);
    EN  = 1;             // => E = 1
    __delay_ms(4);
    EN  = 0;             // => E = 0
}

void Lcd_Clear() {
    Lcd_Cmd(0);
    Lcd_Cmd(1);
}

void Lcd_Set_Cursor(char a, char b) {
    char temp,z,y;
    if(a == 1) {
        temp = 0x80 + b - 1;
        z = temp>>4;
        y = temp & 0x0F;
        Lcd_Cmd(z);
        Lcd_Cmd(y);
    } else if(a == 2) {
        temp = 0xC0 + b - 1;
        z = temp>>4;
        y = temp & 0x0F;
        Lcd_Cmd(z);
        Lcd_Cmd(y);
    }
}

void Lcd_Init() {
    Lcd_Port(0x00);
    __delay_ms(20);
    Lcd_Cmd(0x03);
    __delay_ms(5);
    Lcd_Cmd(0x03);
    __delay_ms(11);
    Lcd_Cmd(0x03);
    /////////////////////////////////////////////////////
    Lcd_Cmd(0x02);
    Lcd_Cmd(0x02);
    Lcd_Cmd(0x08);
    Lcd_Cmd(0x00);
    Lcd_Cmd(0x0C);
    Lcd_Cmd(0x00);
    Lcd_Cmd(0x06);
}

void Lcd_Write_Char(char a) {
    char temp,y;
    temp = a&0x0F;
    y = a&0xF0;
    RS = 1;             // => RS = 1
    Lcd_Port(y>>4);             //Data transfer
    EN = 1;
    __delay_us(40);
    EN = 0;
    Lcd_Port(temp);
    EN = 1;
    __delay_us(40);
    EN = 0;
}

void Lcd_Write_String(char *a) {
    int i;
    for(i=0;a[i]!='\0';i++)
        Lcd_Write_Char(a[i]);
}

void main() {
    TRISD = 0x00;
    TRISE = 0x00;
    Lcd_Init();
    Lcd_Set_Cursor(1,1);
    Lcd_Write_String("SSPU");
    while(1);
}









//or Practical no. 2 
#include <xc.h>
#include <pic.h>
#define _XTAL_FREQ 20000000
#define rs PORTDbits.RD0
#define rw PORTDbits.RD1
#define en PORTDbits.RD2

void command (unsigned char cmd)
{
    PORTC= cmd;
    rs = 0;
    rw = 0;
    en = 1;
    __delay_ms(5);
    en = 0;
}

void data(unsigned char data)
{
    PORTC = data;
    rs = 1;
    rw = 0;
    en = 1;
    __delay_ms(5);
    en = 0;
}
void string(unsigned char *display)
{
    while (*display)
    {
        data(*display++);
    }
}
void lcd_initialize()
{

    command(0x38); //8-bit 2 line mode
    command(0x0c); //Display ON, Cursor OFF
    command(0x06); //Increment Cursor
    command(0x01); //Clear Screen
}

/*Some Extra Commands for LCD
 * 0x30 //8-bit 1 line mode
 * 0x20 //4-bit 1 line mode
 * 0x28 //4-bit 2 line mode
 * 0x08 //Display ON, Cursor OFF
 * 0x0E //Display ON, Cursor ON
 * 0x0F //Display ON, Cursor Blinking
 * 0x18 //Shift entire display left
 * 0x1C //Shift entire display right
 * 0x10 //Move Cursor left by one character
 * 0x14 //Move Cursor right by one character
 * 0x80 //Force cursor to beginning of 1st row
 * 0x8(x) //Force cursor to "x"th column of 1st row
 * 0xC0 //Force cursor to beginning of 2nd row
 * 0xC(x) //Force cursor to "x"th column of 2nd row
 */
void lcd_set_cursor(unsigned int row, unsigned int column)
{
    int cursor = 0x00;
    if (row == 1)
        cursor = (0b10000000|column);
    if (row == 2)
        cursor = (0b11000000|column);
    command(cursor);
}
void main()
{
    TRISC = 0;
    TRISD = 0;
    lcd_initialize();
    while(1)
    {
        lcd_set_cursor(1, 5);
        string("HELLO WORLD");
        lcd_set_cursor(2, 5);
        string("SSPU");
    }
}